

package com.linkedin.norbert.network

object RequestSpec {
  def apply[RequestMsg, PartitionedId](message: RequestMsg,
                                                    ids: Set[PartitionedId],
                                                    requestBuilder: (Node, Set[PartitionedId]) => RequestMsg): RequestSpec = {
    new RequestSpec(message, ids, requestBuilder)
  }

  def apply[RequestMsg](message: RequestMsg):RequestSpec = {
    new RequestSpec(message, None, None)
  }

  def apply[RequestMsg, PartitionedId](message: RequestMsg,
                                                    ids: Set[PartitionedId]):RequestSpec = {
    new RequestSpec(message, ids, None)
  }

  def apply[PartitionedId, RequestMsg] (ids: Set[PartitionedId],
                                                     requestBuilder: (Node, Set[PartitionedId]) => RequestMsg): RequestSpec ={
    new RequestSpec(None, ids, requestBuilder)
  }
}

class RequestSpec[RequestMsg, PartitionedId](val message: Option[RequestMsg],
                                             val ids: Option[Set[PartitionedId]],
                                             val requestBuilder: Option[(Node, Set[PartitionedId]) => RequestMsg]) {
  /**
   * Necessary functions:
   * getters for the ids
   * getter for the message/message set that properly handle requestBuilder vs actual message
   * Should these be extractors?
   */
}